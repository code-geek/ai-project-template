# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

# Install pre-commit with uv for speed:
# uv tool install pre-commit --with pre-commit-uv --force-reinstall

repos:
  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-json
      - id: check-toml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: detect-private-key
      - id: mixed-line-ending
        args: [--fix=lf]

  # Python linting and formatting with Ruff
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.9.1
    hooks:
      # Run the linter with --fix
      - id: ruff
        args: [--fix]
      # Run the formatter
      - id: ruff-format

  # Python type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.14.0
    hooks:
      - id: mypy
        additional_dependencies: [
          django-stubs[compatible-mypy],
          types-requests,
          types-python-dateutil,
        ]
        files: ^backend/
        args: [--config-file=pyproject.toml]

  # Security checks
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: package\.lock\.json

  # Django specific
  - repo: https://github.com/adamchainz/django-upgrade
    rev: "1.22.1"
    hooks:
      - id: django-upgrade
        args: [--target-version, "5.1"]
        files: ^backend/

  # Frontend - Biome (replaces ESLint + Prettier for JS/TS)
  - repo: https://github.com/biomejs/pre-commit
    rev: v0.6.0
    hooks:
      - id: biome-check
        additional_dependencies: ["@biomejs/biome@1.9.4"]
        args: [--write]
        files: \.(js|jsx|ts|tsx|json)$
        exclude: ^(frontend/node_modules|frontend/.next|frontend/out)/

  # Frontend - Type checking
  - repo: local
    hooks:
      - id: typescript-check
        name: TypeScript type checking
        entry: bash -c 'cd frontend && npm run type-check'
        language: system
        files: ^frontend/.*\.(ts|tsx)$
        pass_filenames: false

  # Frontend - Prettier for non-JS files
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.3.3
    hooks:
      - id: prettier
        types_or: [css, scss, markdown]
        exclude: ^(frontend/node_modules|frontend/.next|pnpm-lock.yaml)/

  # AI-friendly: Check for console.log statements
  - repo: local
    hooks:
      - id: no-console-log
        name: Check for console.log
        entry: bash -c 'grep -r "console\.log" frontend/src --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" && echo "console.log found! Use proper logging." && exit 1 || exit 0'
        language: system
        pass_filenames: false
        files: ^frontend/src/.*\.(ts|tsx|js|jsx)$

  # AI-friendly: Check for TODO/FIXME comments
  - repo: local
    hooks:
      - id: check-todos
        name: Check for TODO/FIXME comments
        entry: bash -c 'grep -rE "(TODO|FIXME|XXX|HACK|BUG)" --include="*.ts" --include="*.tsx" --include="*.py" . && echo "Found TODO/FIXME comments. Please address or create issues." || exit 0'
        language: system
        pass_filenames: false
        types: [text]

  # Check for large files that might be model weights or datasets
  - repo: local
    hooks:
      - id: check-model-files
        name: Check for AI model files
        entry: bash -c 'find . -name "*.pkl" -o -name "*.h5" -o -name "*.pt" -o -name "*.pth" -o -name "*.onnx" -o -name "*.safetensors" | grep -v ".gitignore" && echo "Found AI model files! Use Git LFS or external storage." && exit 1 || exit 0'
        language: system
        pass_filenames: false

  # Markdown
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.43.0
    hooks:
      - id: markdownlint
        args: [--fix]

  # Docker
  - repo: https://github.com/hadolint/hadolint
    rev: v2.13.0
    hooks:
      - id: hadolint-docker

  # Keep requirements.txt in sync with pyproject.toml (if using uv)
  - repo: https://github.com/astral-sh/uv-pre-commit
    rev: 0.5.12
    hooks:
      # Lint with a `uv.lock` file
      - id: uv-lock

# Configuration
ci:
  autofix_prs: true
  autofix_commit_msg: '[pre-commit.ci] auto fixes from pre-commit hooks'
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false